# Generated by Django 5.0.12 on 2025-03-09 00:47

import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("authentik_tenants", "0004_tenant_impersonation_require_reason"),
    ]

    operations = [
        migrations.CreateModel(
            name="Queue",
            fields=[
                (
                    "message_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("queue_name", models.TextField(default="default")),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("consumed", "Consumed"),
                            ("rejected", "Rejected"),
                            ("done", "Done"),
                        ],
                        default="queued",
                    ),
                ),
                ("mtime", models.DateTimeField(default=django.utils.timezone.now)),
                ("message", models.JSONField(blank=True, null=True)),
                ("result", models.JSONField(blank=True, null=True)),
                ("result_ttl", models.DateTimeField(blank=True, null=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="authentik_tenants.tenant"
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["state", "mtime"], name="authentik_t_state_b7ff76_idx")
                ],
            },
        ),
        migrations.RunSQL(
            "ALTER TABLE authentik_tasks_queue SET WITHOUT OIDS;", migrations.RunSQL.noop
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="queue",
            trigger=pgtrigger.compiler.Trigger(
                name="notify_enqueueing",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (NEW.\"state\" = 'queued')",
                    constraint="CONSTRAINT",
                    func="\n                    PERFORM pg_notify(\n                        'authentik.tasks' || NEW.queue_name || '.enqueue',\n                        CASE WHEN octet_length(NEW.message::text) >= 8000\n                        THEN jsonb_build_object('message_id', NEW.message_id)::text\n                        ELSE message::text\n                        END\n                    );\n                    RETURN NEW;\n                ",
                    hash="d604c5647f3821f100e8aa7a52be181bde9ebdce",
                    operation="INSERT OR UPDATE",
                    pgid="pgtrigger_notify_enqueueing_b1977",
                    table="authentik_tasks_queue",
                    timing="DEFERRABLE INITIALLY DEFERRED",
                    when="AFTER",
                ),
            ),
        ),
    ]
